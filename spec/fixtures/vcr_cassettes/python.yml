---
http_interactions:
- request:
    method: get
    uri: https://www.python.org/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.python.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Content-Type:
      - text/html; charset=utf-8
      X-Frame-Options:
      - DENY
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 vegur
      Content-Length:
      - '48872'
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 14 Feb 2020 12:37:44 GMT
      Age:
      - '164'
      Connection:
      - keep-alive
      X-Served-By:
      - cache-iad2123-IAD, cache-syd10120-SYD
      X-Cache:
      - HIT, HIT
      X-Cache-Hits:
      - 4, 1
      X-Timer:
      - S1581683865.963357,VS0,VE0
      Vary:
      - Cookie
      Strict-Transport-Security:
      - max-age=63072000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFkb2N0eXBlIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgPGh0bWwgY2xhc3M9Im5vLWpzIGllNiBsdC1pZTcgbHQtaWU4IGx0LWllOSI+ICAgPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgICAgPGh0bWwgY2xhc3M9Im5vLWpzIGllNyBsdC1pZTggbHQtaWU5Ij4gICAgICAgICAgPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+ICAgICAgPGh0bWwgY2xhc3M9Im5vLWpzIGllOCBsdC1pZTkiPiAgICAgICAgICAgICAgICAgPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT48aHRtbCBjbGFzcz0ibm8tanMiIGxhbmc9ImVuIiBkaXI9Imx0ciI+ICA8IS0tPCFbZW5kaWZdLS0+Cgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CgogICAgPGxpbmsgcmVsPSJwcmVmZXRjaCIgaHJlZj0iLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS44LjIvanF1ZXJ5Lm1pbi5qcyI+CgogICAgPG1ldGEgbmFtZT0iYXBwbGljYXRpb24tbmFtZSIgY29udGVudD0iUHl0aG9uLm9yZyI+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLXRvb2x0aXAiIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBob21lIG9mIHRoZSBQeXRob24gUHJvZ3JhbW1pbmcgTGFuZ3VhZ2UiPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IlB5dGhvbi5vcmciPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSIgY29udGVudD0ieWVzIj4KICAgIDxtZXRhIG5hbWU9ImFwcGxlLW1vYmlsZS13ZWItYXBwLXN0YXR1cy1iYXItc3R5bGUiIGNvbnRlbnQ9ImJsYWNrIj4KCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8bWV0YSBuYW1lPSJIYW5kaGVsZEZyaWVuZGx5IiBjb250ZW50PSJUcnVlIj4KICAgIDxtZXRhIG5hbWU9ImZvcm1hdC1kZXRlY3Rpb24iIGNvbnRlbnQ9InRlbGVwaG9uZT1ubyI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJjbGVhcnR5cGUiIGNvbnRlbnQ9Im9uIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9ImltYWdldG9vbGJhciIgY29udGVudD0iZmFsc2UiPgoKICAgIDxzY3JpcHQgc3JjPSIvc3RhdGljL2pzL2xpYnMvbW9kZXJuaXpyLmpzIj48L3NjcmlwdD4KCiAgICA8bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL3N0eWxlLjY3ZjRiMzBmNzQ4My5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIHRpdGxlPSJkZWZhdWx0IiAvPgogICAgPGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9tcS4zYWU4ZTAyZWNlNWIuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ibm90IHByaW50LCBicmFpbGxlLCBlbWJvc3NlZCwgc3BlZWNoLCB0dHkiIC8+CiAgICAKCiAgICA8IS0tW2lmIChsdGUgSUUgOCkmKCFJRU1vYmlsZSldPgogICAgPGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9uby1tcS5mY2Y0MTRkYzY4YTMuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0ic2NyZWVuIiAvPgogICAgCiAgICAKICAgIDwhW2VuZGlmXS0tPgoKICAgIAogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Ii9zdGF0aWMvZmF2aWNvbi5pY28iPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBzaXplcz0iMTQ0eDE0NCIgaHJlZj0iL3N0YXRpYy9hcHBsZS10b3VjaC1pY29uLTE0NHgxNDQtcHJlY29tcG9zZWQucG5nIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjExNHgxMTQiIGhyZWY9Ii9zdGF0aWMvYXBwbGUtdG91Y2gtaWNvbi0xMTR4MTE0LXByZWNvbXBvc2VkLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSI3Mng3MiIgaHJlZj0iL3N0YXRpYy9hcHBsZS10b3VjaC1pY29uLTcyeDcyLXByZWNvbXBvc2VkLnBuZyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIGhyZWY9Ii9zdGF0aWMvYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZC5wbmciPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBocmVmPSIvc3RhdGljL2FwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQucG5nIj4KCiAgICAKICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSIvc3RhdGljL21ldHJvLWljb24tMTQ0eDE0NC1wcmVjb21wb3NlZC5wbmciPjwhLS0gd2hpdGUgc2hhcGUgLS0+CiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVDb2xvciIgY29udGVudD0iIzM2NzNhNSI+PCEtLSBweXRob24gYmx1ZSAtLT4KICAgIDxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tbmF2YnV0dG9uLWNvbG9yIiBjb250ZW50PSIjMzY3M2E1Ij4KCiAgICA8dGl0bGU+V2VsY29tZSB0byBQeXRob24ub3JnPC90aXRsZT4KCiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iVGhlIG9mZmljaWFsIGhvbWUgb2YgdGhlIFB5dGhvbiBQcm9ncmFtbWluZyBMYW5ndWFnZSI+CiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iUHl0aG9uIHByb2dyYW1taW5nIGxhbmd1YWdlIG9iamVjdCBvcmllbnRlZCB3ZWIgZnJlZSBvcGVuIHNvdXJjZSBzb2Z0d2FyZSBsaWNlbnNlIGRvY3VtZW50YXRpb24gZG93bmxvYWQgY29tbXVuaXR5Ij4KCiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIj4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IlB5dGhvbi5vcmciPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnRpdGxlIiBjb250ZW50PSJXZWxjb21lIHRvIFB5dGhvbi5vcmciPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJUaGUgb2ZmaWNpYWwgaG9tZSBvZiB0aGUgUHl0aG9uIFByb2dyYW1taW5nIExhbmd1YWdlIj4KICAgIAogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL3d3dy5weXRob24ub3JnL3N0YXRpYy9vcGVuZ3JhcGgtaWNvbi0yMDB4MjAwLnBuZyI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6c2VjdXJlX3VybCIgY29udGVudD0iaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9zdGF0aWMvb3BlbmdyYXBoLWljb24tMjAweDIwMC5wbmciPgogICAgCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5weXRob24ub3JnLyI+CgogICAgPGxpbmsgcmVsPSJhdXRob3IiIGhyZWY9Ii9zdGF0aWMvaHVtYW5zLnR4dCI+CgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL3Jzcyt4bWwiIHRpdGxlPSJQeXRob24gRW5oYW5jZW1lbnQgUHJvcG9zYWxzIgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXBzLnJzcy8iPgogICAgPGxpbmsgcmVsPSJhbHRlcm5hdGUiIHR5cGU9ImFwcGxpY2F0aW9uL3Jzcyt4bWwiIHRpdGxlPSJQeXRob24gSm9iIE9wcG9ydHVuaXRpZXMiCiAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5weXRob24ub3JnL2pvYnMvZmVlZC9yc3MvIj4KICAgIDxsaW5rIHJlbD0iYWx0ZXJuYXRlIiB0eXBlPSJhcHBsaWNhdGlvbi9yc3MreG1sIiB0aXRsZT0iUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTmV3cyIKICAgICAgICAgIGhyZWY9Imh0dHBzOi8vZmVlZHMuZmVlZGJ1cm5lci5jb20vUHl0aG9uU29mdHdhcmVGb3VuZGF0aW9uTmV3cyI+CiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgdHlwZT0iYXBwbGljYXRpb24vcnNzK3htbCIgdGl0bGU9IlB5dGhvbiBJbnNpZGVyIgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mZWVkcy5mZWVkYnVybmVyLmNvbS9QeXRob25JbnNpZGVyIj4KCiAgICAKCiAgICAKICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+CiAgICAgewogICAgICAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAiQHR5cGUiOiAiV2ViU2l0ZSIsCiAgICAgICAidXJsIjogImh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvIiwKICAgICAgICJwb3RlbnRpYWxBY3Rpb24iOiB7CiAgICAgICAgICJAdHlwZSI6ICJTZWFyY2hBY3Rpb24iLAogICAgICAgICAidGFyZ2V0IjogImh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvc2VhcmNoLz9xPXtzZWFyY2hfdGVybV9zdHJpbmd9IiwKICAgICAgICAgInF1ZXJ5LWlucHV0IjogInJlcXVpcmVkIG5hbWU9c2VhcmNoX3Rlcm1fc3RyaW5nIgogICAgICAgfQogICAgIH0KICAgIDwvc2NyaXB0PgoKICAgIAogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIF9nYXEgPSBfZ2FxIHx8IFtdOwogICAgX2dhcS5wdXNoKFsnX3NldEFjY291bnQnLCAnVUEtMzkwNTU5NzMtMSddKTsKICAgIF9nYXEucHVzaChbJ190cmFja1BhZ2V2aWV3J10pOwoKICAgIChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZ2EgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsgZ2EudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOyBnYS5hc3luYyA9IHRydWU7CiAgICAgICAgZ2Euc3JjID0gKCdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vc3NsJyA6ICdodHRwOi8vd3d3JykgKyAnLmdvb2dsZS1hbmFseXRpY3MuY29tL2dhLmpzJzsKICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYSwgcyk7CiAgICB9KSgpOwogICAgPC9zY3JpcHQ+CiAgICAKPC9oZWFkPgoKPGJvZHkgY2xhc3M9InB5dGhvbiBob21lIiBpZD0iaG9tZXBhZ2UiPgoKICAgIDxkaXYgaWQ9InRvdWNobmF2LXdyYXBwZXIiPgoKICAgICAgICA8ZGl2IGlkPSJub2pzIiBjbGFzcz0iZG8tbm90LXByaW50Ij4KICAgICAgICAgICAgPHA+PHN0cm9uZz5Ob3RpY2U6PC9zdHJvbmc+IFdoaWxlIEphdmFzY3JpcHQgaXMgbm90IGVzc2VudGlhbCBmb3IgdGhpcyB3ZWJzaXRlLCB5b3VyIGludGVyYWN0aW9uIHdpdGggdGhlIGNvbnRlbnQgd2lsbCBiZSBsaW1pdGVkLiBQbGVhc2UgdHVybiBKYXZhc2NyaXB0IG9uIGZvciB0aGUgZnVsbCBleHBlcmllbmNlLiA8L3A+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS1baWYgbHRlIElFIDhdPgogICAgICAgIDxkaXYgaWQ9Im9sZGllLXdhcm5pbmciIGNsYXNzPSJkby1ub3QtcHJpbnQiPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxzdHJvbmc+Tm90aWNlOjwvc3Ryb25nPiBZb3VyIGJyb3dzZXIgaXMgPGVtPmFuY2llbnQ8L2VtPi4gUGxlYXNlCiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vYnJvd3NlaGFwcHkuY29tLyI+dXBncmFkZSB0byBhIGRpZmZlcmVudCBicm93c2VyPC9hPiB0byBleHBlcmllbmNlIGEgYmV0dGVyIHdlYi4KICAgICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhW2VuZGlmXS0tPgoKICAgICAgICA8IS0tIFNpc3RlciBTaXRlIExpbmtzIC0tPgogICAgICAgIDxkaXYgaWQ9InRvcCIgY2xhc3M9InRvcC1iYXIgZG8tbm90LXByaW50Ij4KCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1ldGEtbmF2aWdhdGlvbiBjb250YWluZXIiIHJvbGU9Im5hdmlnYXRpb24iPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2tpcC1saW5rIHNjcmVlbi1yZWFkZXItdGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2NvbnRlbnQiIHRpdGxlPSJTa2lwIHRvIGNvbnRlbnQiPlNraXAgdG8gY29udGVudDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGEgaWQ9ImNsb3NlLXB5dGhvbi1uZXR3b3JrIiBjbGFzcz0ianVtcC1saW5rIiBocmVmPSIjcHl0aG9uLW5ldHdvcmsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tYXJyb3ctZG93biI+PHNwYW4+JiM5NjYwOzwvc3Bhbj48L3NwYW4+IENsb3NlCiAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgCgo8dWwgY2xhc3M9Im1lbnUiIHJvbGU9InRyZWUiPgogICAgCiAgICA8bGkgY2xhc3M9InB5dGhvbi1tZXRhIGN1cnJlbnRfaXRlbSBzZWxlY3RlZGN1cnJlbnRfYnJhbmNoIHNlbGVjdGVkIj4KICAgICAgICA8YSBocmVmPSIvIiB0aXRsZT0iVGhlIFB5dGhvbiBQcm9ncmFtbWluZyBMYW5ndWFnZSIgY2xhc3M9ImN1cnJlbnRfaXRlbSBzZWxlY3RlZGN1cnJlbnRfYnJhbmNoIHNlbGVjdGVkIj5QeXRob248L2E+CiAgICA8L2xpPgogICAgCiAgICA8bGkgY2xhc3M9InBzZi1tZXRhICI+CiAgICAgICAgPGEgaHJlZj0iL3BzZi1sYW5kaW5nLyIgdGl0bGU9IlRoZSBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbiIgPlBTRjwvYT4KICAgIDwvbGk+CiAgICAKICAgIDxsaSBjbGFzcz0iZG9jcy1tZXRhICI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmciIHRpdGxlPSJQeXRob24gRG9jdW1lbnRhdGlvbiIgPkRvY3M8L2E+CiAgICA8L2xpPgogICAgCiAgICA8bGkgY2xhc3M9InB5cGktbWV0YSAiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHlwaS5weXRob24ub3JnLyIgdGl0bGU9IlB5dGhvbiBQYWNrYWdlIEluZGV4IiA+UHlQSTwvYT4KICAgIDwvbGk+CiAgICAKICAgIDxsaSBjbGFzcz0iam9icy1tZXRhICI+CiAgICAgICAgPGEgaHJlZj0iL2pvYnMvIiB0aXRsZT0iUHl0aG9uIEpvYiBCb2FyZCIgPkpvYnM8L2E+CiAgICA8L2xpPgogICAgCiAgICA8bGkgY2xhc3M9InNob3AtbWV0YSAiPgogICAgICAgIDxhIGhyZWY9Ii9jb21tdW5pdHkvIiB0aXRsZT0iUHl0aG9uIENvbW11bml0eSIgPkNvbW11bml0eTwvYT4KICAgIDwvbGk+CiAgICAKPC91bD4KCgogICAgICAgICAgICAgICAgPGEgaWQ9InB5dGhvbi1uZXR3b3JrIiBjbGFzcz0ianVtcC1saW5rIiBocmVmPSIjdG9wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJpY29uLWFycm93LXVwIj48c3Bhbj4mIzk2NTA7PC9zcGFuPjwvc3Bhbj4gVGhlIFB5dGhvbiBOZXR3b3JrCiAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8L25hdj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gSGVhZGVyIGVsZW1lbnRzIC0tPgogICAgICAgIDxoZWFkZXIgY2xhc3M9Im1haW4taGVhZGVyIiByb2xlPSJiYW5uZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgoKICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ic2l0ZS1oZWFkbGluZSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLyI+PGltZyBjbGFzcz0icHl0aG9uLWxvZ28iIHNyYz0iL3N0YXRpYy9pbWcvcHl0aG9uLWxvZ28ucG5nIiBhbHQ9InB5dGhvbiZ0cmFkZTsiPjwvYT4KICAgICAgICAgICAgICAgIDwvaDE+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3B0aW9ucy1iYXItY29udGFpbmVyIGRvLW5vdC1wcmludCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3BzZi9kb25hdGlvbnMvIiBjbGFzcz0iZG9uYXRlLWJ1dHRvbiI+RG9uYXRlPC9hPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9wdGlvbnMtYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJzaXRlLW1hcC1saW5rIiBjbGFzcz0ianVtcC10by1tZW51IiBocmVmPSIjc2l0ZS1tYXAiPjxzcGFuIGNsYXNzPSJtZW51LWljb24iPiZlcXVpdjs8L3NwYW4+IE1lbnU8L2E+PGZvcm0gY2xhc3M9InNlYXJjaC10aGUtc2l0ZSIgYWN0aW9uPSIvc2VhcmNoLyIgbWV0aG9kPSJnZXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHRpdGxlPSJTZWFyY2ggUHl0aG9uLm9yZyI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzcz0iaWNvbi1zZWFyY2giPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzY3JlZW4tcmVhZGVyLXRleHQiIGZvcj0iaWQtc2VhcmNoLWZpZWxkIj5TZWFyY2ggVGhpcyBTaXRlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImlkLXNlYXJjaC1maWVsZCIgbmFtZT0icSIgdHlwZT0ic2VhcmNoIiByb2xlPSJ0ZXh0Ym94IiBjbGFzcz0ic2VhcmNoLWZpZWxkIiBwbGFjZWhvbGRlcj0iU2VhcmNoIiB2YWx1ZT0iIiB0YWJpbmRleD0iMSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIGlkPSJzdWJtaXQiIGNsYXNzPSJzZWFyY2gtYnV0dG9uIiB0aXRsZT0iU3VibWl0IHRoaXMgU2VhcmNoIiB0YWJpbmRleD0iMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdPCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1baWYgSUVdPjxpbnB1dCB0eXBlPSJ0ZXh0IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGRpc2FibGVkPSJkaXNhYmxlZCIgc2l6ZT0iMSIgdGFiaW5kZXg9IjQiPjwhW2VuZGlmXS0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT48c3BhbiBjbGFzcz0iYnJlYWtlciI+PC9zcGFuPjxkaXYgY2xhc3M9ImFkanVzdC1mb250LXNpemUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2aWdhdGlvbiBtZW51IiBhcmlhLWxhYmVsPSJBZGp1c3QgVGV4dCBTaXplIG9uIFBhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0xIGxhc3QiIGFyaWEtaGFzcG9wdXA9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYWN0aW9uLXRyaWdnZXIiPjxzdHJvbmc+PHNtYWxsPkE8L3NtYWxsPiBBPC9zdHJvbmc+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InN1Ym5hdiBtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGNsYXNzPSJ0ZXh0LXNocmluayIgdGl0bGU9Ik1ha2UgVGV4dCBTbWFsbGVyIiBocmVmPSJqYXZhc2NyaXB0OjsiPlNtYWxsZXI8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGNsYXNzPSJ0ZXh0LWdyb3ciIHRpdGxlPSJNYWtlIFRleHQgTGFyZ2VyIiBocmVmPSJqYXZhc2NyaXB0OjsiPkxhcmdlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgY2xhc3M9InRleHQtcmVzZXQiIHRpdGxlPSJSZXNldCBhbnkgZm9udCBzaXplIGNoYW5nZXMgSSBoYXZlIG1hZGUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+UmVzZXQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0id2lua3dpbmstbnVkZ2VudWRnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdmlnYXRpb24gbWVudSIgYXJpYS1sYWJlbD0iU29jaWFsIE1lZGlhIE5hdmlnYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0xIGxhc3QiIGFyaWEtaGFzcG9wdXA9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYWN0aW9uLXRyaWdnZXIiPlNvY2lhbGl6ZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJzdWJuYXYgbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vcHl0aG9ubGFuZz9mcmVmPXRzIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tZmFjZWJvb2siPjwvc3Bhbj5GYWNlYm9vazwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0yIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9UaGVQU0YiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzcz0iaWNvbi10d2l0dGVyIj48L3NwYW4+VHdpdHRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9pcmMvIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tZnJlZW5vZGUiPjwvc3Bhbj5DaGF0IG9uIElSQzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1odG1sLWluY2x1ZGU9Ii9hdXRoZW50aWNhdGVkIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgb3B0aW9ucy1iYXIgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8bmF2IGlkPSJtYWlubmF2IiBjbGFzcz0icHl0aG9uLW5hdmlnYXRpb24gbWFpbi1uYXZpZ2F0aW9uIGRvLW5vdC1wcmludCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAo8dWwgY2xhc3M9Im5hdmlnYXRpb24gbWVudSIgcm9sZT0ibWVudWJhciIgYXJpYS1sYWJlbD0iTWFpbiBOYXZpZ2F0aW9uIj4KICAKICAgIAogICAgCiAgICA8bGkgaWQ9ImFib3V0IiBjbGFzcz0idGllci0xIGVsZW1lbnQtMSAgIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIj4KICAgICAgICA8YSBocmVmPSIvYWJvdXQvIiB0aXRsZT0iIiBjbGFzcz0iIj5BYm91dDwvYT4KICAgICAgICAKICAgICAgICAgICAgCgo8dWwgY2xhc3M9InN1Ym5hdiBtZW51IiByb2xlPSJtZW51IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvYWJvdXQvYXBwcy8iIHRpdGxlPSIiPkFwcGxpY2F0aW9uczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0yIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Fib3V0L3F1b3Rlcy8iIHRpdGxlPSIiPlF1b3RlczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Fib3V0L2dldHRpbmdzdGFydGVkLyIgdGl0bGU9IiI+R2V0dGluZyBTdGFydGVkPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvYWJvdXQvaGVscC8iIHRpdGxlPSIiPkhlbHA8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHA6Ly9icm9jaHVyZS5nZXRweXRob24uaW5mby8iIHRpdGxlPSIiPlB5dGhvbiBCcm9jaHVyZTwvYT48L2xpPgogICAgCjwvdWw+CgogICAgICAgIAogICAgPC9saT4KICAgIAogICAgCiAgICAKICAgIDxsaSBpZD0iZG93bmxvYWRzIiBjbGFzcz0idGllci0xIGVsZW1lbnQtMiAgIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIj4KICAgICAgICA8YSBocmVmPSIvZG93bmxvYWRzLyIgdGl0bGU9IiIgY2xhc3M9IiI+RG93bmxvYWRzPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiIHJvbGU9Im1lbnUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvIiB0aXRsZT0iIj5BbGwgcmVsZWFzZXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvc291cmNlLyIgdGl0bGU9IiI+U291cmNlIGNvZGU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvd2luZG93cy8iIHRpdGxlPSIiPldpbmRvd3M8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvbWFjLW9zeC8iIHRpdGxlPSIiPk1hYyBPUyBYPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTUiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG93bmxvYWQvb3RoZXIvIiB0aXRsZT0iIj5PdGhlciBQbGF0Zm9ybXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvbGljZW5zZS5odG1sIiB0aXRsZT0iIj5MaWNlbnNlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTciIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG93bmxvYWQvYWx0ZXJuYXRpdmVzIiB0aXRsZT0iIj5BbHRlcm5hdGl2ZSBJbXBsZW1lbnRhdGlvbnM8L2E+PC9saT4KICAgIAo8L3VsPgoKICAgICAgICAKICAgIDwvbGk+CiAgICAKICAgIAogICAgCiAgICA8bGkgaWQ9ImRvY3VtZW50YXRpb24iIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC0zICAiIGFyaWEtaGFzcG9wdXA9InRydWUiPgogICAgICAgIDxhIGhyZWY9Ii9kb2MvIiB0aXRsZT0iIiBjbGFzcz0iIj5Eb2N1bWVudGF0aW9uPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiIHJvbGU9Im1lbnUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb2MvIiB0aXRsZT0iIj5Eb2NzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG9jL2F2IiB0aXRsZT0iIj5BdWRpby9WaXN1YWwgVGFsa3M8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vd2lraS5weXRob24ub3JnL21vaW4vQmVnaW5uZXJzR3VpZGUiIHRpdGxlPSIiPkJlZ2lubmVyJiMzOTtzIEd1aWRlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwczovL2Rldmd1aWRlLnB5dGhvbi5vcmcvIiB0aXRsZT0iIj5EZXZlbG9wZXImIzM5O3MgR3VpZGU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vZG9jcy5weXRob24ub3JnL2ZhcS8iIHRpdGxlPSIiPkZBUTwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC02IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cDovL3dpa2kucHl0aG9uLm9yZy9tb2luL0xhbmd1YWdlcyIgdGl0bGU9IiI+Tm9uLUVuZ2xpc2ggRG9jczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC03IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cDovL3B5dGhvbi5vcmcvZGV2L3BlcHMvIiB0aXRsZT0iIj5QRVAgSW5kZXg8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtOCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vd2lraS5weXRob24ub3JnL21vaW4vUHl0aG9uQm9va3MiIHRpdGxlPSIiPlB5dGhvbiBCb29rczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC05IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2RvYy9lc3NheXMvIiB0aXRsZT0iIj5QeXRob24gRXNzYXlzPC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCiAgICAKICAgIAogICAgPGxpIGlkPSJjb21tdW5pdHkiIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC00ICAiIGFyaWEtaGFzcG9wdXA9InRydWUiPgogICAgICAgIDxhIGhyZWY9Ii9jb21tdW5pdHkvIiB0aXRsZT0iIiBjbGFzcz0iIj5Db21tdW5pdHk8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9zdXJ2ZXkiIHRpdGxlPSIiPkNvbW11bml0eSBTdXJ2ZXk8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvZGl2ZXJzaXR5LyIgdGl0bGU9IiI+RGl2ZXJzaXR5PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTMiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L2xpc3RzLyIgdGl0bGU9IiI+TWFpbGluZyBMaXN0czwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC00IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9pcmMvIiB0aXRsZT0iIj5JUkM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvZm9ydW1zLyIgdGl0bGU9IiI+Rm9ydW1zPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTYiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvcHNmL2FubnVhbC1yZXBvcnQvMjAxOS8iIHRpdGxlPSIiPlBTRiBBbm51YWwgSW1wYWN0IFJlcG9ydDwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC03IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS93b3Jrc2hvcHMvIiB0aXRsZT0iIj5QeXRob24gQ29uZmVyZW5jZXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtOCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvc2lncy8iIHRpdGxlPSIiPlNwZWNpYWwgSW50ZXJlc3QgR3JvdXBzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTkiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L2xvZ29zLyIgdGl0bGU9IiI+UHl0aG9uIExvZ288L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMTAiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwczovL3dpa2kucHl0aG9uLm9yZy9tb2luLyIgdGl0bGU9IiI+UHl0aG9uIFdpa2k8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L21lcmNoYW5kaXNlLyIgdGl0bGU9IiI+TWVyY2hhbmRpc2U8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L2F3YXJkcyIgdGl0bGU9IiI+Q29tbXVuaXR5IEF3YXJkczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9wc2YvY29uZHVjdC8iIHRpdGxlPSIiPkNvZGUgb2YgQ29uZHVjdDwvYT48L2xpPgogICAgCjwvdWw+CgogICAgICAgIAogICAgPC9saT4KICAgIAogICAgCiAgICAKICAgIDxsaSBpZD0ic3VjY2Vzcy1zdG9yaWVzIiBjbGFzcz0idGllci0xIGVsZW1lbnQtNSAgIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIj4KICAgICAgICA8YSBocmVmPSIvc3VjY2Vzcy1zdG9yaWVzLyIgdGl0bGU9InN1Y2Nlc3Mtc3RvcmllcyIgY2xhc3M9IiI+U3VjY2VzcyBTdG9yaWVzPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiIHJvbGU9Im1lbnUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvYXJ0cy8iIHRpdGxlPSIiPkFydHM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvYnVzaW5lc3MvIiB0aXRsZT0iIj5CdXNpbmVzczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3N1Y2Nlc3Mtc3Rvcmllcy9jYXRlZ29yeS9lZHVjYXRpb24vIiB0aXRsZT0iIj5FZHVjYXRpb248L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvZW5naW5lZXJpbmcvIiB0aXRsZT0iIj5FbmdpbmVlcmluZzwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC01IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3N1Y2Nlc3Mtc3Rvcmllcy9jYXRlZ29yeS9nb3Zlcm5tZW50LyIgdGl0bGU9IiI+R292ZXJubWVudDwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC02IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3N1Y2Nlc3Mtc3Rvcmllcy9jYXRlZ29yeS9zY2llbnRpZmljLyIgdGl0bGU9IiI+U2NpZW50aWZpYzwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC03IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3N1Y2Nlc3Mtc3Rvcmllcy9jYXRlZ29yeS9zb2Z0d2FyZS1kZXZlbG9wbWVudC8iIHRpdGxlPSIiPlNvZnR3YXJlIERldmVsb3BtZW50PC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCiAgICAKICAgIAogICAgPGxpIGlkPSJuZXdzIiBjbGFzcz0idGllci0xIGVsZW1lbnQtNiAgIiBhcmlhLWhhc3BvcHVwPSJ0cnVlIj4KICAgICAgICA8YSBocmVmPSIvYmxvZ3MvIiB0aXRsZT0iTmV3cyBmcm9tIGFyb3VuZCB0aGUgUHl0aG9uIHdvcmxkIiBjbGFzcz0iIj5OZXdzPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiIHJvbGU9Im1lbnUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9ibG9ncy8iIHRpdGxlPSJQeXRob24gSW5zaWRlciBCbG9nIFBvc3RzIj5QeXRob24gTmV3czwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0yIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3BzZi9uZXdzbGV0dGVyLyIgdGl0bGU9IlB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uIE5ld3NsZXR0ZXIiPlBTRiBOZXdzbGV0dGVyPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTMiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwOi8vcGxhbmV0cHl0aG9uLm9yZy8iIHRpdGxlPSJQbGFuZXQgUHl0aG9uIj5Db21tdW5pdHkgTmV3czwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC00IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cDovL3B5Zm91bmQuYmxvZ3Nwb3QuY29tLyIgdGl0bGU9IlBTRiBCbG9nIj5QU0YgTmV3czwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC01IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cDovL3B5Y29uLmJsb2dzcG90LmNvbS8iIHRpdGxlPSJQeUNvbiBCbG9nIj5QeUNvbiBOZXdzPC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCiAgICAKICAgIAogICAgPGxpIGlkPSJldmVudHMiIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC03ICAiIGFyaWEtaGFzcG9wdXA9InRydWUiPgogICAgICAgIDxhIGhyZWY9Ii9ldmVudHMvIiB0aXRsZT0iIiBjbGFzcz0iIj5FdmVudHM8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2V2ZW50cy9weXRob24tZXZlbnRzIiB0aXRsZT0iIj5QeXRob24gRXZlbnRzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZXZlbnRzL3B5dGhvbi11c2VyLWdyb3VwLyIgdGl0bGU9IiI+VXNlciBHcm91cCBFdmVudHM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9ldmVudHMvcHl0aG9uLWV2ZW50cy9wYXN0LyIgdGl0bGU9IiI+UHl0aG9uIEV2ZW50cyBBcmNoaXZlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZXZlbnRzL3B5dGhvbi11c2VyLWdyb3VwL3Bhc3QvIiB0aXRsZT0iIj5Vc2VyIEdyb3VwIEV2ZW50cyBBcmNoaXZlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTUiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwczovL3dpa2kucHl0aG9uLm9yZy9tb2luL1B5dGhvbkV2ZW50c0NhbGVuZGFyI1N1Ym1pdHRpbmdfYW5fRXZlbnQiIHRpdGxlPSIiPlN1Ym1pdCBhbiBFdmVudDwvYT48L2xpPgogICAgCjwvdWw+CgogICAgICAgIAogICAgPC9saT4KICAgIAogICAgCiAgICAKICAgIAogIAo8L3VsPgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvbmF2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1iYW5uZXIgIj4gPCEtLSBmb3Igb3B0aW9uYWwgImRvLW5vdC1wcmludCIgY2xhc3MgLS0+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPGRpdiBpZD0iZGl2ZS1pbnRvLXB5dGhvbiIgY2xhc3M9ImZsZXgtc2xpZGVzaG93IHNsaWRlc2hvdyI+CgogICAgICAgICAgICA8dWwgY2xhc3M9ImxhdW5jaC1zaGVsbCBtZW51IiBpZD0ibGF1bmNoLXNoZWxsIj4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnV0dG9uIHByb21wdCIgaWQ9InN0YXJ0LXNoZWxsIiBkYXRhLXNoZWxsLWNvbnRhaW5lcj0iI2RpdmUtaW50by1weXRob24iIGhyZWY9Ii9zaGVsbC8iPiZndDtfCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZXNzYWdlIj5MYXVuY2ggSW50ZXJhY3RpdmUgU2hlbGw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgIDx1bCBjbGFzcz0ic2xpZGVzIG1lbnUiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUtY29kZSI+PHByZT48Y29kZT48c3BhbiBjbGFzcz0iY29tbWVudCI+IyBQeXRob24gMzogRmlib25hY2NpIHNlcmllcyB1cCB0byBuPC9zcGFuPg0KPj4+IGRlZiBmaWIobik6DQo+Pj4gICAgIGEsIGIgPSAwLCAxDQo+Pj4gICAgIHdoaWxlIGEgJmx0OyBuOg0KPj4+ICAgICAgICAgcHJpbnQoYSwgZW5kPScgJykNCj4+PiAgICAgICAgIGEsIGIgPSBiLCBhK2INCj4+PiAgICAgcHJpbnQoKQ0KPj4+IGZpYigxMDAwKQ0KPHNwYW4gY2xhc3M9Im91dHB1dCI+MCAxIDEgMiAzIDUgOCAxMyAyMSAzNCA1NSA4OSAxNDQgMjMzIDM3NyA2MTAgOTg3PC9zcGFuPjwvY29kZT48L3ByZT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1jb3B5Ij48aDE+RnVuY3Rpb25zIERlZmluZWQ8L2gxPg0KPHA+VGhlIGNvcmUgb2YgZXh0ZW5zaWJsZSBwcm9ncmFtbWluZyBpcyBkZWZpbmluZyBmdW5jdGlvbnMuIFB5dGhvbiBhbGxvd3MgbWFuZGF0b3J5IGFuZCBvcHRpb25hbCBhcmd1bWVudHMsIGtleXdvcmQgYXJndW1lbnRzLCBhbmQgZXZlbiBhcmJpdHJhcnkgYXJndW1lbnQgbGlzdHMuIDxhIGhyZWY9Ii8vZG9jcy5weXRob24ub3JnLzMvdHV0b3JpYWwvY29udHJvbGZsb3cuaHRtbCNkZWZpbmluZy1mdW5jdGlvbnMiPk1vcmUgYWJvdXQgZGVmaW5pbmcgZnVuY3Rpb25zIGluIFB5dGhvbiZuYnNwOzM8L2E+PC9wPjwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlLWNvZGUiPjxwcmU+PGNvZGU+PHNwYW4gY2xhc3M9ImNvbW1lbnQiPiMgUHl0aG9uIDM6IExpc3QgY29tcHJlaGVuc2lvbnM8L3NwYW4+DQo+Pj4gZnJ1aXRzID0gWydCYW5hbmEnLCAnQXBwbGUnLCAnTGltZSddDQo+Pj4gbG91ZF9mcnVpdHMgPSBbZnJ1aXQudXBwZXIoKSBmb3IgZnJ1aXQgaW4gZnJ1aXRzXQ0KPj4+IHByaW50KGxvdWRfZnJ1aXRzKQ0KPHNwYW4gY2xhc3M9Im91dHB1dCI+WydCQU5BTkEnLCAnQVBQTEUnLCAnTElNRSddPC9zcGFuPg0KDQo8c3BhbiBjbGFzcz0iY29tbWVudCI+IyBMaXN0IGFuZCB0aGUgZW51bWVyYXRlIGZ1bmN0aW9uPC9zcGFuPg0KPj4+IGxpc3QoZW51bWVyYXRlKGZydWl0cykpDQo8c3BhbiBjbGFzcz0ib3V0cHV0Ij5bKDAsICdCYW5hbmEnKSwgKDEsICdBcHBsZScpLCAoMiwgJ0xpbWUnKV08L3NwYW4+PC9jb2RlPjwvcHJlPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlLWNvcHkiPjxoMT5Db21wb3VuZCBEYXRhIFR5cGVzPC9oMT4NCjxwPkxpc3RzIChrbm93biBhcyBhcnJheXMgaW4gb3RoZXIgbGFuZ3VhZ2VzKSBhcmUgb25lIG9mIHRoZSBjb21wb3VuZCBkYXRhIHR5cGVzIHRoYXQgUHl0aG9uIHVuZGVyc3RhbmRzLiBMaXN0cyBjYW4gYmUgaW5kZXhlZCwgc2xpY2VkIGFuZCBtYW5pcHVsYXRlZCB3aXRoIG90aGVyIGJ1aWx0LWluIGZ1bmN0aW9ucy4gPGEgaHJlZj0iLy9kb2NzLnB5dGhvbi5vcmcvMy90dXRvcmlhbC9pbnRyb2R1Y3Rpb24uaHRtbCNsaXN0cyI+TW9yZSBhYm91dCBsaXN0cyBpbiBQeXRob24mbmJzcDszPC9hPjwvcD48L2Rpdj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1jb2RlIj48cHJlPjxjb2RlPjxzcGFuIGNsYXNzPSJjb21tZW50Ij4jIFB5dGhvbiAzOiBTaW1wbGUgYXJpdGhtZXRpYzwvc3Bhbj4NCj4+PiAxIC8gMg0KPHNwYW4gY2xhc3M9Im91dHB1dCI+MC41PC9zcGFuPg0KPj4+IDIgKiogMw0KPHNwYW4gY2xhc3M9Im91dHB1dCI+ODwvc3Bhbj4NCj4+PiAxNyAvIDMgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4jIGNsYXNzaWMgZGl2aXNpb24gcmV0dXJucyBhIGZsb2F0PC9zcGFuPg0KPHNwYW4gY2xhc3M9Im91dHB1dCI+NS42NjY2NjY2NjY2NjY2Njc8L3NwYW4+DQo+Pj4gMTcgLy8gMyAgPHNwYW4gY2xhc3M9ImNvbW1lbnQiPiMgZmxvb3IgZGl2aXNpb248L3NwYW4+DQo8c3BhbiBjbGFzcz0ib3V0cHV0Ij41PC9zcGFuPjwvY29kZT48L3ByZT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1jb3B5Ij48aDE+SW50dWl0aXZlIEludGVycHJldGF0aW9uPC9oMT4NCjxwPkNhbGN1bGF0aW9ucyBhcmUgc2ltcGxlIHdpdGggUHl0aG9uLCBhbmQgZXhwcmVzc2lvbiBzeW50YXggaXMgc3RyYWlnaHRmb3J3YXJkOiB0aGUgb3BlcmF0b3JzIDxjb2RlPis8L2NvZGU+LCA8Y29kZT4tPC9jb2RlPiwgPGNvZGU+KjwvY29kZT4gYW5kIDxjb2RlPi88L2NvZGU+IHdvcmsgYXMgZXhwZWN0ZWQ7IHBhcmVudGhlc2VzIDxjb2RlPigpPC9jb2RlPiBjYW4gYmUgdXNlZCBmb3IgZ3JvdXBpbmcuIDxhIGhyZWY9Imh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvMy90dXRvcmlhbC9pbnRyb2R1Y3Rpb24uaHRtbCN1c2luZy1weXRob24tYXMtYS1jYWxjdWxhdG9yIj5Nb3JlIGFib3V0IHNpbXBsZSBtYXRoIGZ1bmN0aW9ucyBpbiBQeXRob24mbmJzcDszPC9hPi48L3A+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUtY29kZSI+PHByZT48Y29kZT48c3BhbiBjbGFzcz0iY29tbWVudCI+IyBQeXRob24gMzogU2ltcGxlIG91dHB1dCAod2l0aCBVbmljb2RlKTwvc3Bhbj4NCj4+PiBwcmludCgiSGVsbG8sIEknbSBQeXRob24hIikNCjxzcGFuIGNsYXNzPSJvdXRwdXQiPkhlbGxvLCBJJ20gUHl0aG9uITwvc3Bhbj4NCg0KPHNwYW4gY2xhc3M9ImNvbW1lbnQiPiMgSW5wdXQsIGFzc2lnbm1lbnQ8L3NwYW4+DQo+Pj4gbmFtZSA9IGlucHV0KCdXaGF0IGlzIHlvdXIgbmFtZT9cbicpDQo+Pj4gcHJpbnQoJ0hpLCAlcy4nICUgbmFtZSkNCjxzcGFuIGNsYXNzPSJvdXRwdXQiPldoYXQgaXMgeW91ciBuYW1lPw0KUHl0aG9uDQpIaSwgUHl0aG9uLjwvc3Bhbj48L2NvZGU+PC9wcmU+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUtY29weSI+PGgxPlF1aWNrICZhbXA7IEVhc3kgdG8gTGVhcm48L2gxPg0KPHA+RXhwZXJpZW5jZWQgcHJvZ3JhbW1lcnMgaW4gYW55IG90aGVyIGxhbmd1YWdlIGNhbiBwaWNrIHVwIFB5dGhvbiB2ZXJ5IHF1aWNrbHksIGFuZCBiZWdpbm5lcnMgZmluZCB0aGUgY2xlYW4gc3ludGF4IGFuZCBpbmRlbnRhdGlvbiBzdHJ1Y3R1cmUgZWFzeSB0byBsZWFybi4gPGEgaHJlZj0iLy9kb2NzLnB5dGhvbi5vcmcvMy90dXRvcmlhbC8iPldoZXQgeW91ciBhcHBldGl0ZTwvYT4gd2l0aCBvdXIgUHl0aG9uJm5ic3A7MyBvdmVydmlldy48L3A+DQogICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGUtY29kZSI+PHByZT48Y29kZT48c3BhbiBjbGFzcz0iY29tbWVudCI+IyBGb3IgbG9vcCBvbiBhIGxpc3Q8L3NwYW4+DQo+Pj4gbnVtYmVycyA9IFsyLCA0LCA2LCA4XQ0KPj4+IHByb2R1Y3QgPSAxDQo+Pj4gZm9yIG51bWJlciBpbiBudW1iZXJzOg0KLi4uICAgIHByb2R1Y3QgPSBwcm9kdWN0ICogbnVtYmVyDQouLi4gDQo+Pj4gcHJpbnQoJ1RoZSBwcm9kdWN0IGlzOicsIHByb2R1Y3QpDQo8c3BhbiBjbGFzcz0ib3V0cHV0Ij5UaGUgcHJvZHVjdCBpczogMzg0PC9zcGFuPjwvY29kZT48L3ByZT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1jb3B5Ij48aDE+QWxsIHRoZSBGbG93IFlvdSZyc3F1bztkIEV4cGVjdDwvaDE+DQo8cD5QeXRob24ga25vd3MgdGhlIHVzdWFsIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzIHRoYXQgb3RoZXIgbGFuZ3VhZ2VzIHNwZWFrICZtZGFzaDsgPGNvZGU+aWY8L2NvZGU+LCA8Y29kZT5mb3I8L2NvZGU+LCA8Y29kZT53aGlsZTwvY29kZT4gYW5kIDxjb2RlPnJhbmdlPC9jb2RlPiAmbWRhc2g7IHdpdGggc29tZSBvZiBpdHMgb3duIHR3aXN0cywgb2YgY291cnNlLiA8YSBocmVmPSIvL2RvY3MucHl0aG9uLm9yZy8zL3R1dG9yaWFsL2NvbnRyb2xmbG93Lmh0bWwiPk1vcmUgY29udHJvbCBmbG93IHRvb2xzIGluIFB5dGhvbiZuYnNwOzM8L2E+PC9wPjwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJpbnRyb2R1Y3Rpb24iPgogICAgICAgICAgICA8cD5QeXRob24gaXMgYSBwcm9ncmFtbWluZyBsYW5ndWFnZSB0aGF0IGxldHMgeW91IHdvcmsgcXVpY2tseSA8c3BhbiBjbGFzcz0iYnJlYWtlciI+PC9zcGFuPmFuZCBpbnRlZ3JhdGUgc3lzdGVtcyBtb3JlIGVmZmVjdGl2ZWx5LiA8YSBjbGFzcz0icmVhZG1vcmUiIGhyZWY9Ii9kb2MvIj5MZWFybiBNb3JlPC9hPjwvcD4KICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgLmNvbnRhaW5lciAtLT4KICAgICAgICA8L2hlYWRlcj4KCiAgICAgICAgPGRpdiBpZD0iY29udGVudCIgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgIDwhLS0gTWFpbiBDb250ZW50IENvbHVtbiAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz0ibWFpbi1jb250ZW50ICIgcm9sZT0ibWFpbiI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic21hbGwtd2lkZ2V0IGdldC1zdGFydGVkLXdpZGdldCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tZ2V0LXN0YXJ0ZWQiPjwvc3Bhbj5HZXQgU3RhcnRlZDwvaDI+DQo8cD5XaGV0aGVyIHlvdSdyZSBuZXcgdG8gcHJvZ3JhbW1pbmcgb3IgYW4gZXhwZXJpZW5jZWQgZGV2ZWxvcGVyLCBpdCdzIGVhc3kgdG8gbGVhcm4gYW5kIHVzZSBQeXRob24uPC9wPg0KPHA+PGEgaHJlZj0iL2Fib3V0L2dldHRpbmdzdGFydGVkLyI+U3RhcnQgd2l0aCBvdXIgQmVnaW5uZXImcnNxdW87cyBHdWlkZTwvYT48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNtYWxsLXdpZGdldCBkb3dubG9hZC13aWRnZXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9IndpZGdldC10aXRsZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJpY29uLWRvd25sb2FkIj48L3NwYW4+RG93bmxvYWQ8L2gyPgo8cD5QeXRob24gc291cmNlIGNvZGUgYW5kIGluc3RhbGxlcnMgYXJlIGF2YWlsYWJsZSBmb3IgZG93bmxvYWQgZm9yIGFsbCB2ZXJzaW9ucyE8L3A+CjxwPkxhdGVzdDogPGEgaHJlZj0iL2Rvd25sb2Fkcy9yZWxlYXNlL3B5dGhvbi0zODEvIj5QeXRob24gMy44LjE8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbWFsbC13aWRnZXQgZG9jdW1lbnRhdGlvbi13aWRnZXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9IndpZGdldC10aXRsZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJpY29uLWRvY3VtZW50YXRpb24iPjwvc3Bhbj5Eb2NzPC9oMj4NCjxwPkRvY3VtZW50YXRpb24gZm9yIFB5dGhvbidzIHN0YW5kYXJkIGxpYnJhcnksIGFsb25nIHdpdGggdHV0b3JpYWxzIGFuZCBndWlkZXMsIGFyZSBhdmFpbGFibGUgb25saW5lLjwvcD4NCjxwPjxhIGhyZWY9Imh0dHBzOi8vZG9jcy5weXRob24ub3JnIj5kb2NzLnB5dGhvbi5vcmc8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbWFsbC13aWRnZXQgam9icy13aWRnZXQgbGFzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tam9icyI+PC9zcGFuPkpvYnM8L2gyPg0KPHA+TG9va2luZyBmb3Igd29yayBvciBoYXZlIGEgUHl0aG9uIHJlbGF0ZWQgcG9zaXRpb24gdGhhdCB5b3UncmUgdHJ5aW5nIHRvIGhpcmUgZm9yPyBPdXIgPHN0cm9uZz5yZWxhdW5jaGVkIGNvbW11bml0eS1ydW4gam9iIGJvYXJkPC9zdHJvbmc+IGlzIHRoZSBwbGFjZSB0byBnby48L3A+DQo8cD48YSBocmVmPSIvL2pvYnMucHl0aG9uLm9yZyI+am9icy5weXRob24ub3JnPC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaXN0LXdpZGdldHMgcm93Ij4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaXVtLXdpZGdldCBibG9nLXdpZGdldCI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaHJ1YmJlcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tbmV3cyI+PC9zcGFuPkxhdGVzdCBOZXdzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJnaXZlLW1lLW1vcmUiPjxhIGhyZWY9Imh0dHBzOi8vYmxvZy5weXRob24ub3JnIiB0aXRsZT0iTW9yZSBOZXdzIj5Nb3JlPC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Cjx0aW1lIGRhdGV0aW1lPSIyMDIwLTAxLTI1VDE1OjM3OjAwLjAwMDAwNSswMDowMCI+PHNwYW4gY2xhc3M9InNheS1uby1tb3JlIj4yMDIwLTwvc3Bhbj4wMS0yNTwvdGltZT4KIDxhIGhyZWY9Imh0dHA6Ly9mZWVkcHJveHkuZ29vZ2xlLmNvbS9+ci9QeXRob25JbnNpZGVyL34zL2VuX3NZNVVucFFrL3B5dGhvbi0zOTBhMy1ub3ctYXZhaWxhYmxlLWZvci10ZXN0aW5nLmh0bWwiPlB5dGhvbiAzLjkuMGEzIG5vdyBhdmFpbGFibGUgZm9yIHRlc3Rpbmc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Cjx0aW1lIGRhdGV0aW1lPSIyMDIwLTAxLTE3VDIwOjA2OjAwLjAwMDAwNCswMDowMCI+PHNwYW4gY2xhc3M9InNheS1uby1tb3JlIj4yMDIwLTwvc3Bhbj4wMS0xNzwvdGltZT4KIDxhIGhyZWY9Imh0dHA6Ly9mZWVkcHJveHkuZ29vZ2xlLmNvbS9+ci9QeXRob25Tb2Z0d2FyZUZvdW5kYXRpb25OZXdzL34zLzN3elE0b2R5SC00L3N0YXJ0LXVzaW5nLTJmYS1hbmQtYXBpLXRva2Vucy1vbi1weXBpLmh0bWwiPlN0YXJ0IHVzaW5nIDJGQSBhbmQgQVBJIHRva2VucyBvbiBQeVBJPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgo8dGltZSBkYXRldGltZT0iMjAyMC0wMS0xN1QxODowMDowMC4wMDAwMDQrMDA6MDAiPjxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+MjAyMC08L3NwYW4+MDEtMTc8L3RpbWU+CiA8YSBocmVmPSJodHRwczovL21haWxjaGkubXAvcHl0aG9uL3B5dGhvbi1zb2Z0d2FyZS1mb3VuZGF0aW9uLXE0LW5ld3NsZXR0ZXItNDI2OTExIj5QeXRob24gU29mdHdhcmUgRm91bmRhdGlvbiAtIFE0IDIwMTkgTmV3c2xldHRlcjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KPHRpbWUgZGF0ZXRpbWU9IjIwMjAtMDEtMDdUMTY6MDA6MDAuMDAwMDAxKzAwOjAwIj48c3BhbiBjbGFzcz0ic2F5LW5vLW1vcmUiPjIwMjAtPC9zcGFuPjAxLTA3PC90aW1lPgogPGEgaHJlZj0iaHR0cDovL2ZlZWRwcm94eS5nb29nbGUuY29tL35yL1B5dGhvblNvZnR3YXJlRm91bmRhdGlvbk5ld3MvfjMvSi1RTXJBTFhPMGcvcHl0aG9uLXNvZnR3YXJlLWZvdW5kYXRpb24tZmVsbG93Lmh0bWwiPlB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uIEZlbGxvdyBNZW1iZXJzIGZvciBRNCAyMDE5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgo8dGltZSBkYXRldGltZT0iMjAxOS0xMi0yMFQxNDozNzowMC4wMDAwMDQrMDA6MDAiPjxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+MjAxOS08L3NwYW4+MTItMjA8L3RpbWU+CiA8YSBocmVmPSJodHRwOi8vZmVlZHByb3h5Lmdvb2dsZS5jb20vfnIvUHl0aG9uU29mdHdhcmVGb3VuZGF0aW9uTmV3cy9+My9qVnRfNGRaSldhZy9weXRob24tMi1zdW5zZXQuaHRtbCI+UHl0aG9uIDIgc2VyaWVzIHRvIGJlIHJldGlyZWQgYnkgQXByaWwgMjAyMDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgLnNocnViYmVyeSAtLT4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGl1bS13aWRnZXQgZXZlbnQtd2lkZ2V0IGxhc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hydWJiZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9IndpZGdldC10aXRsZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJpY29uLWNhbGVuZGFyIj48L3NwYW4+VXBjb21pbmcgRXZlbnRzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJnaXZlLW1lLW1vcmUiPjxhIGhyZWY9Ii9ldmVudHMvY2FsZW5kYXJzLyIgdGl0bGU9Ik1vcmUgRXZlbnRzIj5Nb3JlPC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Cjx0aW1lIGRhdGV0aW1lPSIyMDIwLTAyLTE4VDAwOjAwOjAwKzAwOjAwIj48c3BhbiBjbGFzcz0ic2F5LW5vLW1vcmUiPjIwMjAtPC9zcGFuPjAyLTE4PC90aW1lPgogPGEgaHJlZj0iL2V2ZW50cy9weXRob24tZXZlbnRzLzg4MC8iPlB5Q29uIE5hbWliaWEgMjAyMDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KPHRpbWUgZGF0ZXRpbWU9IjIwMjAtMDItMjBUMDA6MDA6MDArMDA6MDAiPjxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+MjAyMC08L3NwYW4+MDItMjA8L3RpbWU+CiA8YSBocmVmPSIvZXZlbnRzL3B5dGhvbi1ldmVudHMvOTQ2LyI+T3BlbiBTb3VyY2UgRmVzdGl2YWw8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Cjx0aW1lIGRhdGV0aW1lPSIyMDIwLTAyLTIxVDAwOjAwOjAwKzAwOjAwIj48c3BhbiBjbGFzcz0ic2F5LW5vLW1vcmUiPjIwMjAtPC9zcGFuPjAyLTIxPC90aW1lPgogPGEgaHJlZj0iL2V2ZW50cy9weXRob24tZXZlbnRzLzg5MC8iPlB5Q29uIEJlbGFydXMgMjAyMDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KPHRpbWUgZGF0ZXRpbWU9IjIwMjAtMDItMjVUMjM6MDA6MDArMDA6MDAiPjxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+MjAyMC08L3NwYW4+MDItMjU8L3RpbWU+CiA8YSBocmVmPSIvZXZlbnRzL3B5dGhvbi11c2VyLWdyb3VwLzk0NC8iPlZpc3VhbCBEaWFnbm9zdGljcyBmb3IgTWFjaGluZSBMZWFybmluZyB3aXRoIFB5dGhvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KPHRpbWUgZGF0ZXRpbWU9IjIwMjAtMDItMjlUMDY6MDA6MDArMDA6MDAiPjxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+MjAyMC08L3NwYW4+MDItMjk8L3RpbWU+CiA8YSBocmVmPSIvZXZlbnRzL3B5dGhvbi11c2VyLWdyb3VwLzk1MC8iPlB5dGhvbiBNYXVyaXRpdXMgVXNlciBHcm91cCBNZWV0dXA8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpdW0td2lkZ2V0IHN1Y2Nlc3Mtc3Rvcmllcy13aWRnZXQiPgogICAgICAgICAgICAgICAgICAgICAgICAKCgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hydWJiZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tc3VjY2Vzcy1zdG9yaWVzIj48L3NwYW4+U3VjY2VzcyBTdG9yaWVzPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJnaXZlLW1lLW1vcmUiPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvIiB0aXRsZT0iTW9yZSBTdWNjZXNzIFN0b3JpZXMiPk1vcmU8L2E+PC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VjY2Vzcy1zdG9yeS1pdGVtIiBpZD0ic3VjY2Vzcy1zdG9yeS04MzgiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvc2F2aW5nLXRoZS13b3JsZC13aXRoLW9wZW4tZGF0YS1hbmQtcHl0aG9uLyI+V2hlbiBhbiBPcGVuIERhdGEgc3RhbmRhcmQgaXMgY3JlYXRlZCBhbmQgcHJvbW90ZWQsIGl04oCZcyBpbXBvcnRhbnQgdG8gdGhpbmsgd2h5IC0gd2hhdCBjaGFuZ2UgaXMgdGhpcyB0cnlpbmcgdG8gZHJpdmU/IFdoYXQgd2lsbCBwZW9wbGUgZG8gd2l0aCB0aGlzIGRhdGEgdGhhdCB0aGV5IGNvdWxkbuKAmXQgZG8gYmVmb3JlPzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBib3JkZXI9IjAiIHdpZHRoPSIxMDAlIiBjbGFzcz0icXVvdGUtZnJvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cD48YSBocmVmPSIvc3VjY2Vzcy1zdG9yaWVzL3NhdmluZy10aGUtd29ybGQtd2l0aC1vcGVuLWRhdGEtYW5kLXB5dGhvbi8iPlNhdmluZyB0aGUgd29ybGQgd2l0aCBPcGVuIERhdGEgYW5kIFB5dGhvbjwvYT4gPGVtPmJ5IEphbWVzIEJhc3RlcjwvZW0+PC9wPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgLnNocnViYmVyeSAtLT4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGl1bS13aWRnZXQgYXBwbGljYXRpb25zLXdpZGdldCBsYXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2hydWJiZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tcHl0aG9uIj48L3NwYW4+VXNlIFB5dGhvbiBmb3ImaGVsbGlwOzwvaDI+DQo8cCBjbGFzcz0iZ2l2ZS1tZS1tb3JlIj48YSBocmVmPSIvYWJvdXQvYXBwcyIgdGl0bGU9Ik1vcmUgQXBwbGljYXRpb25zIj5Nb3JlPC9hPjwvcD4NCg0KPHVsIGNsYXNzPSJtZW51Ij4NCiAgICA8bGk+PGI+V2ViIERldmVsb3BtZW50PC9iPjoNCiAgICAgICAgPHNwYW4gY2xhc3M9InRhZy13cmFwcGVyIj48YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vd3d3LmRqYW5nb3Byb2plY3QuY29tLyI+RGphbmdvPC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3d3dy5weWxvbnNwcm9qZWN0Lm9yZy8iPlB5cmFtaWQ8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vYm90dGxlcHkub3JnIj5Cb3R0bGU8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vdG9ybmFkb3dlYi5vcmciPlRvcm5hZG88L2E+LCA8YSBocmVmPSJodHRwOi8vZmxhc2sucG9jb28ub3JnLyIgY2xhc3M9InRhZyI+Rmxhc2s8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vd3d3LndlYjJweS5jb20vIj53ZWIycHk8L2E+PC9zcGFuPjwvbGk+DQogICAgPGxpPjxiPkdVSSBEZXZlbG9wbWVudDwvYj46DQogICAgICAgIDxzcGFuIGNsYXNzPSJ0YWctd3JhcHBlciI+PGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3dpa2kucHl0aG9uLm9yZy9tb2luL1RrSW50ZXIiPnRrSW50ZXI8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwczovL3dpa2kuZ25vbWUub3JnL1Byb2plY3RzL1B5R09iamVjdCI+UHlHT2JqZWN0PC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3d3dy5yaXZlcmJhbmtjb21wdXRpbmcuY28udWsvc29mdHdhcmUvcHlxdC9pbnRybyI+UHlRdDwvYT4sIDxhIGNsYXNzPSJ0YWciIGhyZWY9Imh0dHBzOi8vd2lraS5xdC5pby9QeVNpZGUiPlB5U2lkZTwvYT4sIDxhIGNsYXNzPSJ0YWciIGhyZWY9Imh0dHBzOi8va2l2eS5vcmcvIj5LaXZ5PC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3d3dy53eHB5dGhvbi5vcmcvIj53eFB5dGhvbjwvYT48L3NwYW4+PC9saT4NCiAgICA8bGk+PGI+U2NpZW50aWZpYyBhbmQgTnVtZXJpYzwvYj46DQogICAgICAgIDxzcGFuIGNsYXNzPSJ0YWctd3JhcHBlciI+DQo8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vd3d3LnNjaXB5Lm9yZyI+U2NpUHk8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vcGFuZGFzLnB5ZGF0YS5vcmcvIj5QYW5kYXM8L2E+LCA8YSBocmVmPSJodHRwOi8vaXB5dGhvbi5vcmciIGNsYXNzPSJ0YWciPklQeXRob248L2E+PC9zcGFuPjwvbGk+DQogICAgPGxpPjxiPlNvZnR3YXJlIERldmVsb3BtZW50PC9iPjoNCiAgICAgICAgPHNwYW4gY2xhc3M9InRhZy13cmFwcGVyIj48YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vYnVpbGRib3QubmV0LyI+QnVpbGRib3Q8L2E+LCA8YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vdHJhYy5lZGdld2FsbC5vcmcvIj5UcmFjPC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3JvdW5kdXAuc291cmNlZm9yZ2UubmV0LyI+Um91bmR1cDwvYT48L3NwYW4+PC9saT4NCiAgICA8bGk+PGI+U3lzdGVtIEFkbWluaXN0cmF0aW9uPC9iPjoNCiAgICAgICAgPHNwYW4gY2xhc3M9InRhZy13cmFwcGVyIj48YSBjbGFzcz0idGFnIiBocmVmPSJodHRwOi8vd3d3LmFuc2libGUuY29tIj5BbnNpYmxlPC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cDovL3d3dy5zYWx0c3RhY2suY29tIj5TYWx0PC9hPiwgPGEgY2xhc3M9InRhZyIgaHJlZj0iaHR0cHM6Ly93d3cub3BlbnN0YWNrLm9yZyI+T3BlblN0YWNrPC9hPjwvc3Bhbj48L2xpPg0KPC91bD4NCgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIGVuZCAuc2hydWJiZXJ5IC0tPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGVwLXdpZGdldCI+CgogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InByb21wdCI+Jmd0OyZndDsmZ3Q7PC9zcGFuPiA8YSBocmVmPSIvZGV2L3BlcHMvIj5QeXRob24gRW5oYW5jZW1lbnQgUHJvcG9zYWxzPHNwYW4gY2xhc3M9InNheS1uby1tb3JlIj4gKFBFUHMpPC9zcGFuPjwvYT46IFRoZSBmdXR1cmUgb2YgUHl0aG9uPHNwYW4gY2xhc3M9InNheS1uby1tb3JlIj4gaXMgZGlzY3Vzc2VkIGhlcmUuPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9InJzcy1saW5rIiBocmVmPSIvZGV2L3BlcHMvcGVwcy5yc3MiPjxzcGFuIGNsYXNzPSJpY29uLWZlZWQiPjwvc3Bhbj4gUlNTPC9hPgogICAgICAgICAgICAgICAgICAgIDwvaDI+CgoKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwc2Ytd2lkZ2V0Ij4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHl0aG9uLWxvZ28iPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0id2lkZ2V0LXRpdGxlIj4NCiAgICA8c3BhbiBjbGFzcz0icHJvbXB0Ij4mZ3Q7Jmd0OyZndDs8L3NwYW4+IDxhIGhyZWY9Ii9wc2YvIj5QeXRob24gU29mdHdhcmUgRm91bmRhdGlvbjwvYT4NCjwvaDI+DQo8cD5UaGUgbWlzc2lvbiBvZiB0aGUgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gaXMgdG8gcHJvbW90ZSwgcHJvdGVjdCwgYW5kIGFkdmFuY2UgdGhlIFB5dGhvbiBwcm9ncmFtbWluZyBsYW5ndWFnZSwgYW5kIHRvIHN1cHBvcnQgYW5kIGZhY2lsaXRhdGUgdGhlIGdyb3d0aCBvZiBhIGRpdmVyc2UgYW5kIGludGVybmF0aW9uYWwgY29tbXVuaXR5IG9mIFB5dGhvbiBwcm9ncmFtbWVycy4gPGEgY2xhc3M9InJlYWRtb3JlIiBocmVmPSIvcHNmLyI+TGVhcm4gbW9yZTwvYT4gPC9wPg0KPHAgY2xhc3M9ImNsaWNrLXRoZXNlIj4NCiAgICA8YSBjbGFzcz0iYnV0dG9uIiBocmVmPSIvdXNlcnMvbWVtYmVyc2hpcC8iPkJlY29tZSBhIE1lbWJlcjwvYT4NCiAgICA8YSBjbGFzcz0iYnV0dG9uIiBocmVmPSIvcHNmL2RvbmF0aW9ucy8iPkRvbmF0ZSB0byB0aGUgUFNGPC9hPg0KPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CgoKCgogICAgICAgICAgICAgICAgPC9zZWN0aW9uPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCgogICAgICAgICAgICA8L2Rpdj48IS0tIGVuZCAuY29udGFpbmVyIC0tPgogICAgICAgIDwvZGl2PjwhLS0gZW5kICNjb250ZW50IC5jb250ZW50LXdyYXBwZXIgLS0+CgogICAgICAgIDwhLS0gRm9vdGVyIGFuZCBzb2NpYWwgbWVkaWEgbGlzdCAtLT4KICAgICAgICA8Zm9vdGVyIGlkPSJzaXRlLW1hcCIgY2xhc3M9Im1haW4tZm9vdGVyIiByb2xlPSJjb250ZW50aW5mbyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4tZm9vdGVyLWxpbmtzIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxhIGlkPSJiYWNrLXRvLXRvcC0xIiBjbGFzcz0ianVtcC1saW5rIiBocmVmPSIjcHl0aG9uLW5ldHdvcmsiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzcz0iaWNvbi1hcnJvdy11cCI+PHNwYW4+JiM5NjUwOzwvc3Bhbj48L3NwYW4+IEJhY2sgdG8gVG9wPC9hPgoKICAgICAgICAgICAgICAgICAgICAKCjx1bCBjbGFzcz0ic2l0ZW1hcCBuYXZpZ2F0aW9uIG1lbnUgZG8tbm90LXByaW50IiByb2xlPSJ0cmVlIiBpZD0iY29udGFpbmVyIj4KICAgIAogICAgPGxpIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC0xIj4KICAgICAgICA8YSBocmVmPSIvYWJvdXQvIiA+QWJvdXQ8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSI+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvYWJvdXQvYXBwcy8iIHRpdGxlPSIiPkFwcGxpY2F0aW9uczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0yIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Fib3V0L3F1b3Rlcy8iIHRpdGxlPSIiPlF1b3RlczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Fib3V0L2dldHRpbmdzdGFydGVkLyIgdGl0bGU9IiI+R2V0dGluZyBTdGFydGVkPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvYWJvdXQvaGVscC8iIHRpdGxlPSIiPkhlbHA8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHA6Ly9icm9jaHVyZS5nZXRweXRob24uaW5mby8iIHRpdGxlPSIiPlB5dGhvbiBCcm9jaHVyZTwvYT48L2xpPgogICAgCjwvdWw+CgogICAgICAgIAogICAgPC9saT4KICAgIAogICAgPGxpIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC0yIj4KICAgICAgICA8YSBocmVmPSIvZG93bmxvYWRzLyIgPkRvd25sb2FkczwvYT4KICAgICAgICAKICAgICAgICAgICAgCgo8dWwgY2xhc3M9InN1Ym5hdiBtZW51Ij4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvIiB0aXRsZT0iIj5BbGwgcmVsZWFzZXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvc291cmNlLyIgdGl0bGU9IiI+U291cmNlIGNvZGU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvd2luZG93cy8iIHRpdGxlPSIiPldpbmRvd3M8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb3dubG9hZHMvbWFjLW9zeC8iIHRpdGxlPSIiPk1hYyBPUyBYPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTUiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG93bmxvYWQvb3RoZXIvIiB0aXRsZT0iIj5PdGhlciBQbGF0Zm9ybXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvbGljZW5zZS5odG1sIiB0aXRsZT0iIj5MaWNlbnNlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTciIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG93bmxvYWQvYWx0ZXJuYXRpdmVzIiB0aXRsZT0iIj5BbHRlcm5hdGl2ZSBJbXBsZW1lbnRhdGlvbnM8L2E+PC9saT4KICAgIAo8L3VsPgoKICAgICAgICAKICAgIDwvbGk+CiAgICAKICAgIDxsaSBjbGFzcz0idGllci0xIGVsZW1lbnQtMyI+CiAgICAgICAgPGEgaHJlZj0iL2RvYy8iID5Eb2N1bWVudGF0aW9uPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2RvYy8iIHRpdGxlPSIiPkRvY3M8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9kb2MvYXYiIHRpdGxlPSIiPkF1ZGlvL1Zpc3VhbCBUYWxrczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9CZWdpbm5lcnNHdWlkZSIgdGl0bGU9IiI+QmVnaW5uZXImIzM5O3MgR3VpZGU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vZGV2Z3VpZGUucHl0aG9uLm9yZy8iIHRpdGxlPSIiPkRldmVsb3BlciYjMzk7cyBHdWlkZTwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC01IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvZmFxLyIgdGl0bGU9IiI+RkFRPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTYiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwOi8vd2lraS5weXRob24ub3JnL21vaW4vTGFuZ3VhZ2VzIiB0aXRsZT0iIj5Ob24tRW5nbGlzaCBEb2NzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTciIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwOi8vcHl0aG9uLm9yZy9kZXYvcGVwcy8iIHRpdGxlPSIiPlBFUCBJbmRleDwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC04IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9QeXRob25Cb29rcyIgdGl0bGU9IiI+UHl0aG9uIEJvb2tzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTkiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZG9jL2Vzc2F5cy8iIHRpdGxlPSIiPlB5dGhvbiBFc3NheXM8L2E+PC9saT4KICAgIAo8L3VsPgoKICAgICAgICAKICAgIDwvbGk+CiAgICAKICAgIDxsaSBjbGFzcz0idGllci0xIGVsZW1lbnQtNCI+CiAgICAgICAgPGEgaHJlZj0iL2NvbW11bml0eS8iID5Db21tdW5pdHk8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSI+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L3N1cnZleSIgdGl0bGU9IiI+Q29tbXVuaXR5IFN1cnZleTwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0yIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9kaXZlcnNpdHkvIiB0aXRsZT0iIj5EaXZlcnNpdHk8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvbGlzdHMvIiB0aXRsZT0iIj5NYWlsaW5nIExpc3RzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L2lyYy8iIHRpdGxlPSIiPklSQzwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC01IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9mb3J1bXMvIiB0aXRsZT0iIj5Gb3J1bXM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9wc2YvYW5udWFsLXJlcG9ydC8yMDE5LyIgdGl0bGU9IiI+UFNGIEFubnVhbCBJbXBhY3QgUmVwb3J0PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTciIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvY29tbXVuaXR5L3dvcmtzaG9wcy8iIHRpdGxlPSIiPlB5dGhvbiBDb25mZXJlbmNlczwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC04IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2NvbW11bml0eS9zaWdzLyIgdGl0bGU9IiI+U3BlY2lhbCBJbnRlcmVzdCBHcm91cHM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtOSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvbG9nb3MvIiB0aXRsZT0iIj5QeXRob24gTG9nbzwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xMCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vd2lraS5weXRob24ub3JnL21vaW4vIiB0aXRsZT0iIj5QeXRob24gV2lraTwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xMSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvbWVyY2hhbmRpc2UvIiB0aXRsZT0iIj5NZXJjaGFuZGlzZTwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9jb21tdW5pdHkvYXdhcmRzIiB0aXRsZT0iIj5Db21tdW5pdHkgQXdhcmRzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEzIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL3BzZi9jb25kdWN0LyIgdGl0bGU9IiI+Q29kZSBvZiBDb25kdWN0PC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCiAgICA8bGkgY2xhc3M9InRpZXItMSBlbGVtZW50LTUiPgogICAgICAgIDxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvIiB0aXRsZT0ic3VjY2Vzcy1zdG9yaWVzIj5TdWNjZXNzIFN0b3JpZXM8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSI+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvc3VjY2Vzcy1zdG9yaWVzL2NhdGVnb3J5L2FydHMvIiB0aXRsZT0iIj5BcnRzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvc3VjY2Vzcy1zdG9yaWVzL2NhdGVnb3J5L2J1c2luZXNzLyIgdGl0bGU9IiI+QnVzaW5lc3M8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvZWR1Y2F0aW9uLyIgdGl0bGU9IiI+RWR1Y2F0aW9uPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvc3VjY2Vzcy1zdG9yaWVzL2NhdGVnb3J5L2VuZ2luZWVyaW5nLyIgdGl0bGU9IiI+RW5naW5lZXJpbmc8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvZ292ZXJubWVudC8iIHRpdGxlPSIiPkdvdmVybm1lbnQ8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvc2NpZW50aWZpYy8iIHRpdGxlPSIiPlNjaWVudGlmaWM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9zdWNjZXNzLXN0b3JpZXMvY2F0ZWdvcnkvc29mdHdhcmUtZGV2ZWxvcG1lbnQvIiB0aXRsZT0iIj5Tb2Z0d2FyZSBEZXZlbG9wbWVudDwvYT48L2xpPgogICAgCjwvdWw+CgogICAgICAgIAogICAgPC9saT4KICAgIAogICAgPGxpIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC02Ij4KICAgICAgICA8YSBocmVmPSIvYmxvZ3MvIiB0aXRsZT0iTmV3cyBmcm9tIGFyb3VuZCB0aGUgUHl0aG9uIHdvcmxkIj5OZXdzPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Jsb2dzLyIgdGl0bGU9IlB5dGhvbiBJbnNpZGVyIEJsb2cgUG9zdHMiPlB5dGhvbiBOZXdzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvcHNmL25ld3NsZXR0ZXIvIiB0aXRsZT0iUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24gTmV3c2xldHRlciI+UFNGIE5ld3NsZXR0ZXI8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHA6Ly9wbGFuZXRweXRob24ub3JnLyIgdGl0bGU9IlBsYW5ldCBQeXRob24iPkNvbW11bml0eSBOZXdzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwOi8vcHlmb3VuZC5ibG9nc3BvdC5jb20vIiB0aXRsZT0iUFNGIEJsb2ciPlBTRiBOZXdzPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTUiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwOi8vcHljb24uYmxvZ3Nwb3QuY29tLyIgdGl0bGU9IlB5Q29uIEJsb2ciPlB5Q29uIE5ld3M8L2E+PC9saT4KICAgIAo8L3VsPgoKICAgICAgICAKICAgIDwvbGk+CiAgICAKICAgIDxsaSBjbGFzcz0idGllci0xIGVsZW1lbnQtNyI+CiAgICAgICAgPGEgaHJlZj0iL2V2ZW50cy8iID5FdmVudHM8L2E+CiAgICAgICAgCiAgICAgICAgICAgIAoKPHVsIGNsYXNzPSJzdWJuYXYgbWVudSI+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTEiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZXZlbnRzL3B5dGhvbi1ldmVudHMiIHRpdGxlPSIiPlB5dGhvbiBFdmVudHM8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMiIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9ldmVudHMvcHl0aG9uLXVzZXItZ3JvdXAvIiB0aXRsZT0iIj5Vc2VyIEdyb3VwIEV2ZW50czwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0zIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2V2ZW50cy9weXRob24tZXZlbnRzL3Bhc3QvIiB0aXRsZT0iIj5QeXRob24gRXZlbnRzIEFyY2hpdmU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNCIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Ii9ldmVudHMvcHl0aG9uLXVzZXItZ3JvdXAvcGFzdC8iIHRpdGxlPSIiPlVzZXIgR3JvdXAgRXZlbnRzIEFyY2hpdmU8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtNSIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vd2lraS5weXRob24ub3JnL21vaW4vUHl0aG9uRXZlbnRzQ2FsZW5kYXIjU3VibWl0dGluZ19hbl9FdmVudCIgdGl0bGU9IiI+U3VibWl0IGFuIEV2ZW50PC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCiAgICA8bGkgY2xhc3M9InRpZXItMSBlbGVtZW50LTgiPgogICAgICAgIDxhIGhyZWY9Ii9kZXYvIiA+Q29udHJpYnV0aW5nPC9hPgogICAgICAgIAogICAgICAgICAgICAKCjx1bCBjbGFzcz0ic3VibmF2IG1lbnUiPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC0xIiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iaHR0cHM6Ly9kZXZndWlkZS5weXRob24ub3JnLyIgdGl0bGU9IiI+RGV2ZWxvcGVyJiMzOTtzIEd1aWRlPC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTIiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSJodHRwczovL2J1Z3MucHl0aG9uLm9yZy8iIHRpdGxlPSIiPklzc3VlIFRyYWNrZXI8L2E+PC9saT4KICAgIAogICAgICAgIDxsaSBjbGFzcz0idGllci0yIGVsZW1lbnQtMyIgcm9sZT0idHJlZWl0ZW0iPjxhIGhyZWY9Imh0dHBzOi8vbWFpbC5weXRob24ub3JnL21haWxtYW4vbGlzdGluZm8vcHl0aG9uLWRldiIgdGl0bGU9IiI+cHl0aG9uLWRldiBsaXN0PC9hPjwvbGk+CiAgICAKICAgICAgICA8bGkgY2xhc3M9InRpZXItMiBlbGVtZW50LTQiIHJvbGU9InRyZWVpdGVtIj48YSBocmVmPSIvZGV2L2NvcmUtbWVudG9yc2hpcC8iIHRpdGxlPSIiPkNvcmUgTWVudG9yc2hpcDwvYT48L2xpPgogICAgCiAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTIgZWxlbWVudC01IiByb2xlPSJ0cmVlaXRlbSI+PGEgaHJlZj0iL2Rldi9zZWN1cml0eS8iIHRpdGxlPSIiPlJlcG9ydCBhIFNlY3VyaXR5IElzc3VlPC9hPjwvbGk+CiAgICAKPC91bD4KCiAgICAgICAgCiAgICA8L2xpPgogICAgCjwvdWw+CgoKICAgICAgICAgICAgICAgICAgICA8YSBpZD0iYmFjay10by10b3AtMiIgY2xhc3M9Imp1bXAtbGluayIgaHJlZj0iI3B5dGhvbi1uZXR3b3JrIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9Imljb24tYXJyb3ctdXAiPjxzcGFuPiYjOTY1MDs8L3NwYW4+PC9zcGFuPiBCYWNrIHRvIFRvcDwvYT4KICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICA8L2Rpdj48IS0tIGVuZCAuY29udGFpbmVyIC0tPgogICAgICAgICAgICA8L2Rpdj4gPCEtLSBlbmQgLm1haW4tZm9vdGVyLWxpbmtzIC0tPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2l0ZS1iYXNlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXItbGlua3MgbmF2aWdhdGlvbiBtZW51IGRvLW5vdC1wcmludCIgcm9sZT0idHJlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0xIGVsZW1lbnQtMSI+PGEgaHJlZj0iL2Fib3V0L2hlbHAvIj5IZWxwICZhbXA7IDxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+R2VuZXJhbDwvc3Bhbj4gQ29udGFjdDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRpZXItMSBlbGVtZW50LTIiPjxhIGhyZWY9Ii9jb21tdW5pdHkvZGl2ZXJzaXR5LyI+RGl2ZXJzaXR5IDxzcGFuIGNsYXNzPSJzYXktbm8tbW9yZSI+SW5pdGlhdGl2ZXM8L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idGllci0xIGVsZW1lbnQtMyI+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3B5dGhvbi9weXRob25kb3RvcmcvaXNzdWVzIj5TdWJtaXQgV2Vic2l0ZSBCdWc8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0aWVyLTEgZWxlbWVudC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vc3RhdHVzLnB5dGhvbi5vcmcvIj5TdGF0dXMgPHNwYW4gY2xhc3M9InB5dGhvbi1zdGF0dXMtaW5kaWNhdG9yLWRlZmF1bHQiIGlkPSJweXRob24tc3RhdHVzLWluZGljYXRvciI+PC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3B5cmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48c21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHJlIj5Db3B5cmlnaHQgJmNvcHk7MjAwMS0yMDIwLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOzxzcGFuIGNsYXNzPSJwcmUiPjxhIGhyZWY9Ii9wc2YtbGFuZGluZy8iPlB5dGhvbiBTb2Z0d2FyZSBGb3VuZGF0aW9uPC9hPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOzxzcGFuIGNsYXNzPSJwcmUiPjxhIGhyZWY9Ii9hYm91dC9sZWdhbC8iPkxlZ2FsIFN0YXRlbWVudHM8L2E+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7PHNwYW4gY2xhc3M9InByZSI+PGEgaHJlZj0iL3ByaXZhY3kvIj5Qcml2YWN5IFBvbGljeTwvYT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDs8c3BhbiBjbGFzcz0icHJlIj48YSBocmVmPSIvcHNmL3Nwb25zb3JzaGlwL3Nwb25zb3JzLyNoZXJva3UiPlBvd2VyZWQgYnkgSGVyb2t1PC9hPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zbWFsbD48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgLmNvbnRhaW5lciAtLT4KICAgICAgICAgICAgPC9kaXY+PCEtLSBlbmQgLnNpdGUtYmFzZSAtLT4KCiAgICAgICAgPC9mb290ZXI+CgogICAgPC9kaXY+PCEtLSBlbmQgI3RvdWNobmF2LXdyYXBwZXIgLS0+CgogICAgCiAgICA8c2NyaXB0IHNyYz0iLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS44LjIvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0PndpbmRvdy5qUXVlcnkgfHwgZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgc3JjPSIvc3RhdGljL2pzL2xpYnMvanF1ZXJ5LTEuOC4yLm1pbi5qcyI+PFwvc2NyaXB0PicpPC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvanMvbGlicy9tYXNvbnJ5LnBrZ2QubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvc3RhdGljL2pzL2xpYnMvaHRtbC1pbmNsdWRlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3N0YXRpYy9qcy9tYWluLW1pbi4wMzdkOTAzN2YxMTIuanMiIGNoYXJzZXQ9InV0Zi04Ij48L3NjcmlwdD4KICAgIAoKICAgIDwhLS1baWYgbHRlIElFIDddPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3N0YXRpYy9qcy9wbHVnaW5zL0lFOC1taW4uNzk4NjA1ZDVmN2EyLmpzIiBjaGFyc2V0PSJ1dGYtOCI+PC9zY3JpcHQ+CiAgICAKICAgIAogICAgPCFbZW5kaWZdLS0+CgogICAgPCEtLVtpZiBsdGUgSUUgOF0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc3RhdGljL2pzL3BsdWdpbnMvZ2V0Q29tcHV0ZWRTdHlsZS1taW4uYzM4NjBiZTFkMjkwLmpzIiBjaGFyc2V0PSJ1dGYtOCI+PC9zY3JpcHQ+CiAgICAKICAgIAogICAgPCFbZW5kaWZdLS0+CgogICAgCgogICAgCiAgICAKCjwvYm9keT4KPC9odG1sPgo=
    http_version: null
  recorded_at: Fri, 14 Feb 2020 12:37:45 GMT
recorded_with: VCR 5.1.0
